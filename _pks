#compdef pks
# Tyler Britten
# tyler@britten.us

# Output a selectable list of clusters
__pks_clusters() {
    declare -a cont_cmd
    if [[ $(pks --version | awk -F '.' '{print $2}') -lt 5 ]]
    then
      cont_cmd=($(pks clusters | awk -F '  ' 'NR>2{print $2}'))
    else
      cont_cmd=($(pks clusters | awk 'NR>2{print $1}'))
    fi
    if [[ 'X$cont_cmd' != 'X' ]]
        _describe 'CLUSTER' cont_cmd
}

# Output a selectable list of plans
# TODO add to plan options during create-cluster
__pks_plans() {
    declare -a cont_cmd
    cont_cmd=($(pks plans --json | grep "\"name\":" | awk '{ gsub("\"","",$2); gsub(",","",$2); print $2; }'))
    if [[ 'X$cont_cmd' != 'X' ]]
        _describe 'PLANS' cont_cmd
}

# Output a selectable list of network profiles
__pks_network-profiles() {
    declare -a cont_cmd
    cont_cmd=($(pks network-profiles | awk -F '  ' 'NR>2{print $1}'))
    if [[ 'X$cont_cmd' != 'X' ]]
        _describe 'NETWORK-PROFILES' cont_cmd
}


local -a _pks_cmds
_pks_cmds=(
  'cluster:View the details of the cluster'
  'clusters:Show all clusters created with PKS'
  'create-cluster:Creates a kubernetes cluster, requires cluster name, an external host name, and plan'
  'create-network-profile:Create a network profile'
  'create-sink:Creates a sink for sending all log data to syslog://'
  'delete-cluster:Deletes a kubernetes cluster, requires cluster name'
  'delete-network-profile:Delete a network profile'
  'delete-sink:Deletes a sink from the given cluster'
  'get-credentials:Allows you to connect to a cluster and use kubectl'
  'get-kubeconfig:Allows you to get kubeconfig for your username'
  'help:Help about any command'
  'login:Log in to PKS'
  'logout:Log out of PKS'
  'network-profile:View a network profile'
  'network-profiles:Show all network profiles created with PKS'
  'plans:View the preconfigured plans available'
  'resize:Changes the number of worker nodes for a cluster'
  'sinks:List sinks for the given cluster'
  'update-cluster:Updates the configuration of a specific kubernetes cluster'
  'upgrade-cluster:Upgrades the kubernetes clusters'
)

__cluster() {
    _arguments \
      '1:cluster name:__pks_clusters' \
      '--details[Show details]' \
      '--help[help for cluster]' \
      '--json[Return the PKS-API output as json]'
}

__clusters() {
    _arguments \
      '--help[help for clusters]' \
      '--json[Return the PKS-API output as json]'  
}

__create-cluster() {
    _arguments \
        '1:cluster name' \
        '--external-hostname[Address from which to access Kubernetes API]' \
        '--help[help for create-cluster]' \
        '--json[Return the PKS-API output as json]' \
        '--network-profile[Optional, network profile name (NSX-T only)]' \
        '--non-interactive[Dont ask for user input]' \
        '--num-nodes[Number of worker nodes]' \
        '--plan[Preconfigured plans. Run pks plans for more details]:plans existing_plans:__pks_plans' \
        '--wait[Wait for the operation to finish]' 
}

__create-network-profile() {
    _arguments \
        '1:network-profile-JSON-path' \
        '--help[help for create-network-profile]' \
}

__create-sink() {
    _arguments \
        '1:cluster name:__pks_clusters' \
        '2:sink url' \
        '--name[Sink Name]' \
        '--help[help for create-sink]' \
}

__delete-cluster() {
    _arguments \
        '1:cluster name:__pks_clusters' \
        '--help[help for delete-cluster]' \
        '--non-interactive[Dont ask for user input]' \
        '--wait[Wait for the operation to finish]' 
}

__delete-network-profile() {
    _arguments \
        '1:network-profile-name' \
        '--help[help for delete-network-profile]' \
        '--non-interactive[Dont ask for user input]' \
}

__delete-sink() {
    _arguments \
        '1:cluster name:__pks_clusters' \
        '--name[Sink Name]' \
        '--help[help for delete-sink]' \
}

__get-credentials() {
    _arguments \
      '1:cluster name:__pks_clusters' \
      '--help[help for cluster]' \
}
__get-kubeconfig() {
    _arguments \
      '1:cluster name:__pks_clusters' \
      '--api[The PKS API server URI]' \
      '--ca-cert[Path to CA Cert for PKS API]' \
      '--help[help for login]' \
      '--password[Password]' \
      '--skip-ssl-validation[Skip SSL Validation]' \
      '--sso[Prompt for a one-time passcode to do Single sign-on]' \
      '--sso-auto[Auto launch local browser to do Single sign-on]' \
      '--sso-passcode string[Single sign-on with one-time passcode]' \
      '--username[Username]' \
}
__login() {
    _arguments \
      '--api[The PKS API server URI]' \
      '--ca-cert[Path to CA Cert for PKS API]' \
      '--client-name[Client name]' \
      '--client-secret[Client secret]' \
      '--help[help for login]' \
      '--password[Password]' \
      '--skip-ssl-validation[Skip SSL Validation]' \
      '--username[Username]' \
}

__network-profile() {
    _arguments \
      '1:network profile:__pks_network-profiles' \
      '--help[help for network-profile]' \
      '--json[Return the PKS-API output as json]'
}

__network-profiles() {
    _arguments \
      '--help[help for network-profile]' \
      '--json[Return the PKS-API output as json]'
}

__plans() {
    _arguments \
      '--help[help for network-profile]' \
      '--json[Return the PKS-API output as json]'
}

__resize() {
    _arguments \
        '1:cluster name:__pks_clusters' \
        '--help[help for resize]' \
        '--json[Return the PKS-API output as json. Only applicable when used with --wait flag]' \
        '--non-interactive[Dont ask for user input]' \
        '--num-nodes[Number of worker nodes (default 1)]' \
        '--wait[Wait for the operation to finish]' 
}

__sinks() {
    _arguments \
        '1:cluster name:__pks_clusters' \
        '--help[help for sinks]' \
        '--json[Return the PKS-API output as json]' \
}

__update-cluster(){
    _arguments \
        '1:cluster name:__pks_clusters' \
        '--network-profile[Action flag, Network profile name]' \
        '--num-nodes[Action flag, Number of worker nodes]' \
        '--kubelet-drain-timeout[Action flag, The length of time in minutes for drain to wait before giving up.]' \
        '--kubelet-drain-grace-period[Action flag, Period of time in seconds given to each pod to terminate gracefully.]' \
        '--kubelet-drain-force[Action flag, Force drain even if there are pods not managed by a ReplicationController, ReplicaSet, Job, DaemonSet or StatefulSet.]' \
        '--kubelet-drain-ignore-daemonsets[Action flag, Ignore DaemonSet managed pods during drain.]' \
        '--kubelet-drain-delete-local-data[Action flag, Drain even if there are pods using emptyDir.]' \
        '--kubelet-drain-force-node[Action flag, Forcefully terminate pods which fail to drain. Use it with caution.]' \
        '--non-interactive[Dont ask for user input]' \
        '--json[Return the PKS-API output as json]' \
        '--wait[Wait for the operation to finish]' \
        '--help[help for update-cluster]'
}

__upgrade-cluster() {
    _arguments \
        '1:cluster name:__pks_clusters' \
        '--help[help for upgrade-cluster]' \
        '--json[Return the PKS-API output as json. Only applicable when used with --wait flag]' \
        '--non-interactive[Dont ask for user input]'
}

_arguments '*:: :->command'

if (( CURRENT == 1 )); then
  _describe -t commands "pks command" _pks_cmds
  return
fi

local -a _command_args
case "$words[1]" in
  cluster)
    __cluster ;;
  clusters)
    __clusters;;
  create-cluster)
    __create-cluster ;;
  create-network-profile)
    __create-network-profile;;
  create-sink)
    __create-sink ;;
  delete-cluster)
    __delete-cluster ;;
  delete-network-profile)
    __delete-network-profile;;
  delete-sink)
    __delete-sink ;;
  get-credentials)
    __get-credentials ;;
  get-kubeconfig)
    __get-kubeconfig ;;
  login)
    __login ;;
  network-profile)
    __network-profile ;;
  network-profiles)
    __network-profiles ;;
  plans)
    __plans ;;
  resize)
    __resize ;;
  sinks)
    __sinks ;;
  update-cluster)
    __update-cluster ;;
  upgrade-cluster)
    __upgrade-cluster ;;
esac
